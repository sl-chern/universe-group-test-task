services:
  gateway:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        PACKAGE_NAME: gateway
    volumes:
      - ./apps/gateway/:/app/apps/gateway
    env_file: ./apps/gateway/.env
    healthcheck:
      test: wget http://0.0.0.0:${GATEWAY_PORT}/api/v1/health -q -S -O -
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      NATS_HOST: "nats"
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy

  fb-collector:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        PACKAGE_NAME: fb-collector
    volumes:
      - ./apps/fb-collector/:/app/apps/fb-collector
    env_file: ./apps/fb-collector/.env
    healthcheck:
      test: wget http://0.0.0.0:${FB_COLLECTOR_PORT}/api/v1/health -q -S -O -
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${FB_COLLECTOR_PORT}:${FB_COLLECTOR_PORT}
    environment:
      NATS_HOST: "nats"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: "sh start.sh"

  prometheus:
    image: prom/prometheus
    network_mode: host
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    network_mode: host
    privileged: true
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - "./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    depends_on:
      - prometheus

  ttk-collector:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        PACKAGE_NAME: ttk-collector
    volumes:
      - ./apps/ttk-collector/:/app/apps/ttk-collector
    env_file: ./apps/ttk-collector/.env
    healthcheck:
      test: wget http://0.0.0.0:${TTK_COLLECTOR_PORT}/api/v1/health -q -S -O -
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${TTK_COLLECTOR_PORT}:${TTK_COLLECTOR_PORT}
    environment:
      NATS_HOST: "nats"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: "sh start.sh"

  reporter:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        PACKAGE_NAME: reporter
    volumes:
      - ./apps/reporter/:/app/apps/reporter
    env_file: ./apps/reporter/.env
    healthcheck:
      test: wget http://0.0.0.0:${REPORTER_PORT}/api/v1/health -q -S -O -
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${REPORTER_PORT}:${REPORTER_PORT}
    depends_on:
      postgres:
        condition: service_healthy
    command: "sh start.sh"

  publisher:
    image: andriiuni/events
    platform: linux/arm64
    environment:
      EVENT_ENDPOINT: http://gateway:3003/api/v1/events
    depends_on:
      - gateway

  nats:
    image: nats:2.11.6-alpine
    volumes:
      - nats_data:/data
    healthcheck:
      test: wget http://localhost:8222/healthz -q -S -O -
      interval: 30s
      timeout: 20s
      retries: 5
    ports:
      - 8222:8222
    command:
      - "-js"
      - "--http_port=8222"

  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prisma -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c listen_addresses='*'
    logging:
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  nats_data:
  grafana_data:
